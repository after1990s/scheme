#lang racket
(define (g f a b n k end)
  (define (sum f a h k)
    (f (+ a (* k h))))
(cond ((> k end)
       0)
      ((= k 0)
       (* (/ (/ (- b a) n) 3.0) (+ (sum f a (/ (- b a) n) k ) (g f a b n (+ k 1) end))))
      ((= k end)
       (* (/ (/ (- b a) n) 3.0) (+ (sum f a (/ (- b a) n) k) (g f a b n (+ k 1) end))))
      ((even? k)
       (* (/ (/ (- b a) n) 3.0) (+ (* 2 (sum f a (/ (- b a) n) k )) (g f a b n (+ k 1) end))))
      (else 
       (* (/ (/ (- b a) n) 3.0) (+ (* 4 (sum f a (/ (- b a) n) k )) (g f a b n (+ k 1) end))))  
))   
(define (cube x)
  (* x x x))
(define (even? k)
  (= (remainder k 2) 0))
(g cube 0 1 100 0 1)