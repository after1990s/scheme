#lang racket
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
     (sqrt-iter (improve guess x) x)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0. 0001))
(define (improve guess x)
  (average guess (/ x guess)))
(define (average guess x)
  (/ (+ guess x) 2))
(define (square x)
  (* x x))
(define (abs x)
  (cond ((< x 0) (- 0 x))
        (else x)))
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
(sqrt-iter 1.0 2)
